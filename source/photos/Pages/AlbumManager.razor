@page "/manage-albums"
@inject HttpClient HttpClient
@using System.Threading
@using System.IO
@using System.Collections.Generic
@using photos_library.Models

<h1>Albums</h1>
<div class="photo-album-manager">
	@foreach (var album in Albums) {
		<div class="photo-album-manager-tile">
			<NavLink class="nav-link" href="@album.Path">
				<span class="oi oi-image" aria-hidden="true"></span> @album.Title
			</NavLink>
			<button class="btn btn-info" type="button" @onclick="@(() => SelectAlbumForRename(album))"><span class="oi oi-pencil" aria-hidden="true"></span> Rename</button>
			<button class="btn btn-danger" type="button" @onclick="@(() => DeleteAlbum(album))"><span class="oi oi-trash" aria-hidden="true"></span> Delete</button>
		</div>
	}
</div>

@if (RenamingAlbum) {
<div>
	<label>Album Name</label>
	<input type="text" @bind-value="@AlbumTitle" />
	<button class="btn btn-info" type="button" @onclick="@SaveAlbum"><span class="oi oi-flash" aria-hidden="true"></span> Rename</button>
	<button class="btn btn-light" type="button" @onclick="@CancelEdits"><span class="oi oi-undo" aria-hidden="true"></span> Cancel</button>
</div>
}

@if (AddingNewAlbum) {
<div>
	<label>File Location</label>
	<input type="text" @bind-value="@NewAlbumLocation" />
	<button class="btn btn-info" type="button" @onclick="@CreateNewAlbum"><span class="oi oi-transfer" aria-hidden="true"></span> Create</button>
	<button class="btn btn-light" type="button" @onclick="@CancelEdits"><span class="oi oi-undo" aria-hidden="true"></span> Cancel</button>
</div>
} else {
<div>
	<button class="btn btn-info" type="button" @onclick="@ShowNewAlbum"><span class="oi oi-plus" aria-hidden="true"></span> New Album</button>
</div>
}

<div class="alert-danger">@ErrorMessage</div>

@code {
	private IEnumerable<Album> Albums { get; set; } = new Album[0];
	private Album SelectedAlbum { get; set; }
	private bool AddingNewAlbum { get; set; } = false;
	private bool RenamingAlbum { get; set; } = false;
	private string NewAlbumLocation { get; set; }
	private string ErrorMessage { get; set; }
	private string AlbumTitle { get; set; }

	protected async override Task OnInitializedAsync() {
		try {
			ErrorMessage = null;
			Albums = await HttpClient.GetJsonAsync<IEnumerable<Album>>("api/albums");
		} catch (Exception ex) {
			Albums = new Album[0];
			ErrorMessage = ex.Message;
		}
	}

	private void ShowNewAlbum() {
		NewAlbumLocation = null;
		AddingNewAlbum = true;
	}

	private void CancelEdits() {
		AddingNewAlbum = false;
		RenamingAlbum = false;
		NewAlbumLocation = null;
		AlbumTitle = null;
		SelectedAlbum = null;
		ErrorMessage = null;
	}

	private async void CreateNewAlbum() {
		try {
			string location = NewAlbumLocation;
			CancelEdits();
			Albums = await HttpClient.PostJsonAsync<IEnumerable<Album>>("api/albums/create", location);
		} catch (Exception ex) {
			ErrorMessage = ex.Message;
		}
	}

	private async void DeleteAlbum(Album album) {
		try {
			CancelEdits();
			Albums = await HttpClient.PostJsonAsync<IEnumerable<Album>>($"api/albums/delete/{album.ID}", null);
		} catch (Exception ex) {
			ErrorMessage = ex.Message;
		}
	}

	private void SelectAlbumForRename(Album album) {
		SelectedAlbum = album;
		AlbumTitle = album.Title;
		RenamingAlbum = true;
		AddingNewAlbum = false;
	}

	private async void SaveAlbum() {
		try {
			Album album = SelectedAlbum;
			album.Title = AlbumTitle;
			CancelEdits();
			Albums = await HttpClient.PostJsonAsync<IEnumerable<Album>>($"api/albums/update", album);
		} catch (Exception ex) {
			ErrorMessage = ex.Message;
		}
	}
}
